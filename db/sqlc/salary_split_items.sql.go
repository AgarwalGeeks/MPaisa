// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: salary_split_items.sql

package db

import (
	"context"
	"database/sql"
)

const addSalarySplitItem = `-- name: AddSalarySplitItem :one
INSERT INTO "Finance"."Salary_split_items" (
    split_id,
    category_name,
    amount,
    move_to,
    is_transferred
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, split_id, category_name, amount, move_to, is_transferred, created_at, updated_at
`

type AddSalarySplitItemParams struct {
	SplitID       int32          `json:"split_id"`
	CategoryName  string         `json:"category_name"`
	Amount        string         `json:"amount"`
	MoveTo        sql.NullString `json:"move_to"`
	IsTransferred sql.NullBool   `json:"is_transferred"`
}

func (q *Queries) AddSalarySplitItem(ctx context.Context, arg AddSalarySplitItemParams) (FinanceSalarySplitItems, error) {
	row := q.db.QueryRowContext(ctx, addSalarySplitItem,
		arg.SplitID,
		arg.CategoryName,
		arg.Amount,
		arg.MoveTo,
		arg.IsTransferred,
	)
	var i FinanceSalarySplitItems
	err := row.Scan(
		&i.ID,
		&i.SplitID,
		&i.CategoryName,
		&i.Amount,
		&i.MoveTo,
		&i.IsTransferred,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSalarySplitItemsBySplitId = `-- name: DeleteSalarySplitItemsBySplitId :exec
DELETE FROM "Finance"."Salary_split_items"
WHERE split_id = $1
`

func (q *Queries) DeleteSalarySplitItemsBySplitId(ctx context.Context, splitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSalarySplitItemsBySplitId, splitID)
	return err
}

const getAllSalarySplitItemsByUserId = `-- name: GetAllSalarySplitItemsByUserId :many
SELECT ssi.id, ssi.split_id, ssi.category_name, ssi.amount, ssi.move_to, ssi.is_transferred, ssi.created_at, ssi.updated_at FROM "Finance"."Salary_split_items" ssi
JOIN "Finance"."Salary_splits" ss ON ssi.split_id = ss.id
WHERE ss.user_id = $1
ORDER BY ss.month DESC, ssi.category_name
`

func (q *Queries) GetAllSalarySplitItemsByUserId(ctx context.Context, userID int32) ([]FinanceSalarySplitItems, error) {
	rows, err := q.db.QueryContext(ctx, getAllSalarySplitItemsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceSalarySplitItems
	for rows.Next() {
		var i FinanceSalarySplitItems
		if err := rows.Scan(
			&i.ID,
			&i.SplitID,
			&i.CategoryName,
			&i.Amount,
			&i.MoveTo,
			&i.IsTransferred,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalarySplitItemsBySplitId = `-- name: GetSalarySplitItemsBySplitId :many
SELECT id, split_id, category_name, amount, move_to, is_transferred, created_at, updated_at FROM "Finance"."Salary_split_items"
WHERE split_id = $1
`

func (q *Queries) GetSalarySplitItemsBySplitId(ctx context.Context, splitID int32) ([]FinanceSalarySplitItems, error) {
	rows, err := q.db.QueryContext(ctx, getSalarySplitItemsBySplitId, splitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceSalarySplitItems
	for rows.Next() {
		var i FinanceSalarySplitItems
		if err := rows.Scan(
			&i.ID,
			&i.SplitID,
			&i.CategoryName,
			&i.Amount,
			&i.MoveTo,
			&i.IsTransferred,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSalarySplitItemAsTransferredById = `-- name: MarkSalarySplitItemAsTransferredById :exec
UPDATE "Finance"."Salary_split_items"
SET is_transferred = TRUE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) MarkSalarySplitItemAsTransferredById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markSalarySplitItemAsTransferredById, id)
	return err
}

const updateSalarySplitItemAmountById = `-- name: UpdateSalarySplitItemAmountById :exec
UPDATE "Finance"."Salary_split_items"
SET amount = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateSalarySplitItemAmountByIdParams struct {
	Amount string `json:"amount"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateSalarySplitItemAmountById(ctx context.Context, arg UpdateSalarySplitItemAmountByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateSalarySplitItemAmountById, arg.Amount, arg.ID)
	return err
}
