// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: salary_splits.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addSalarySplit = `-- name: AddSalarySplit :one
INSERT INTO "Finance"."Salary_splits" (
    user_id,
    total_salary,
    month,
    notes,
    is_fully_transferred
) VALUES (
  $1, $2, $3, $4, $5
) 
RETURNING id, user_id, month, total_salary, notes, is_fully_transferred, created_at, updated_at
`

type AddSalarySplitParams struct {
	UserID             int32          `json:"user_id"`
	TotalSalary        string         `json:"total_salary"`
	Month              time.Time      `json:"month"`
	Notes              sql.NullString `json:"notes"`
	IsFullyTransferred sql.NullBool   `json:"is_fully_transferred"`
}

func (q *Queries) AddSalarySplit(ctx context.Context, arg AddSalarySplitParams) (FinanceSalarySplits, error) {
	row := q.db.QueryRowContext(ctx, addSalarySplit,
		arg.UserID,
		arg.TotalSalary,
		arg.Month,
		arg.Notes,
		arg.IsFullyTransferred,
	)
	var i FinanceSalarySplits
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.TotalSalary,
		&i.Notes,
		&i.IsFullyTransferred,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSalarySplitById = `-- name: DeleteSalarySplitById :exec
DELETE FROM "Finance"."Salary_splits"
WHERE id = $1
`

func (q *Queries) DeleteSalarySplitById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSalarySplitById, id)
	return err
}

const getSalarySplitById = `-- name: GetSalarySplitById :one
SELECT id, user_id, month, total_salary, notes, is_fully_transferred, created_at, updated_at FROM "Finance"."Salary_splits"
WHERE id = $1
`

func (q *Queries) GetSalarySplitById(ctx context.Context, id int32) (FinanceSalarySplits, error) {
	row := q.db.QueryRowContext(ctx, getSalarySplitById, id)
	var i FinanceSalarySplits
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.TotalSalary,
		&i.Notes,
		&i.IsFullyTransferred,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalarySplitsByUserId = `-- name: GetSalarySplitsByUserId :many
SELECT id, user_id, month, total_salary, notes, is_fully_transferred, created_at, updated_at FROM "Finance"."Salary_splits"
WHERE user_id = $1
ORDER BY month DESC
`

func (q *Queries) GetSalarySplitsByUserId(ctx context.Context, userID int32) ([]FinanceSalarySplits, error) {
	rows, err := q.db.QueryContext(ctx, getSalarySplitsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceSalarySplits
	for rows.Next() {
		var i FinanceSalarySplits
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Month,
			&i.TotalSalary,
			&i.Notes,
			&i.IsFullyTransferred,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSalarySplitAsFullyTransferredById = `-- name: MarkSalarySplitAsFullyTransferredById :exec
UPDATE "Finance"."Salary_splits"
SET is_fully_transferred = TRUE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) MarkSalarySplitAsFullyTransferredById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markSalarySplitAsFullyTransferredById, id)
	return err
}

const upDateSalarySplitTotalById = `-- name: UpDateSalarySplitTotalById :exec
UPDATE "Finance"."Salary_splits"
SET total_salary = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpDateSalarySplitTotalByIdParams struct {
	TotalSalary string `json:"total_salary"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpDateSalarySplitTotalById(ctx context.Context, arg UpDateSalarySplitTotalByIdParams) error {
	_, err := q.db.ExecContext(ctx, upDateSalarySplitTotalById, arg.TotalSalary, arg.ID)
	return err
}
