// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: credit_card.sql

package db

import (
	"context"
	"database/sql"
)

const addCreditCard = `-- name: AddCreditCard :one
INSERT INTO "Finance"."Credit_Card" (
    bank_name,
    card_name,
    card_number,
    cvv,
    pin,
    usage,
    user_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING bank_name, card_name, card_number, cvv, pin, usage, user_id
`

type AddCreditCardParams struct {
	BankName   string         `json:"bank_name"`
	CardName   string         `json:"card_name"`
	CardNumber string         `json:"card_number"`
	Cvv        string         `json:"cvv"`
	Pin        string         `json:"pin"`
	Usage      sql.NullString `json:"usage"`
	UserID     int32          `json:"user_id"`
}

func (q *Queries) AddCreditCard(ctx context.Context, arg AddCreditCardParams) (FinanceCreditCard, error) {
	row := q.db.QueryRowContext(ctx, addCreditCard,
		arg.BankName,
		arg.CardName,
		arg.CardNumber,
		arg.Cvv,
		arg.Pin,
		arg.Usage,
		arg.UserID,
	)
	var i FinanceCreditCard
	err := row.Scan(
		&i.BankName,
		&i.CardName,
		&i.CardNumber,
		&i.Cvv,
		&i.Pin,
		&i.Usage,
		&i.UserID,
	)
	return i, err
}

const deleteCreditCardByCardNumber = `-- name: DeleteCreditCardByCardNumber :exec
DELETE FROM "Finance"."Credit_Card"
WHERE card_number = $1 AND user_id = $2
`

type DeleteCreditCardByCardNumberParams struct {
	CardNumber string `json:"card_number"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) DeleteCreditCardByCardNumber(ctx context.Context, arg DeleteCreditCardByCardNumberParams) error {
	_, err := q.db.ExecContext(ctx, deleteCreditCardByCardNumber, arg.CardNumber, arg.UserID)
	return err
}

const getAllCreditCards = `-- name: GetAllCreditCards :many
SELECT bank_name, card_name, card_number, cvv, pin, usage, user_id FROM "Finance"."Credit_Card"
WHERE user_id = $1 ORDER BY bank_name, card_name
`

func (q *Queries) GetAllCreditCards(ctx context.Context, userID int32) ([]FinanceCreditCard, error) {
	rows, err := q.db.QueryContext(ctx, getAllCreditCards, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceCreditCard
	for rows.Next() {
		var i FinanceCreditCard
		if err := rows.Scan(
			&i.BankName,
			&i.CardName,
			&i.CardNumber,
			&i.Cvv,
			&i.Pin,
			&i.Usage,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreditCardByCardNumber = `-- name: GetCreditCardByCardNumber :one
SELECT bank_name, card_name, card_number, cvv, pin, usage, user_id FROM "Finance"."Credit_Card"
WHERE card_number = $1 AND user_id = $2
`

type GetCreditCardByCardNumberParams struct {
	CardNumber string `json:"card_number"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) GetCreditCardByCardNumber(ctx context.Context, arg GetCreditCardByCardNumberParams) (FinanceCreditCard, error) {
	row := q.db.QueryRowContext(ctx, getCreditCardByCardNumber, arg.CardNumber, arg.UserID)
	var i FinanceCreditCard
	err := row.Scan(
		&i.BankName,
		&i.CardName,
		&i.CardNumber,
		&i.Cvv,
		&i.Pin,
		&i.Usage,
		&i.UserID,
	)
	return i, err
}

const getCreditCardByUsage = `-- name: GetCreditCardByUsage :one
SELECT bank_name, card_name, card_number, cvv, pin, usage, user_id FROM "Finance"."Credit_Card"
WHERE usage LIKE $1 AND user_id = $2
`

type GetCreditCardByUsageParams struct {
	Usage  sql.NullString `json:"usage"`
	UserID int32          `json:"user_id"`
}

func (q *Queries) GetCreditCardByUsage(ctx context.Context, arg GetCreditCardByUsageParams) (FinanceCreditCard, error) {
	row := q.db.QueryRowContext(ctx, getCreditCardByUsage, arg.Usage, arg.UserID)
	var i FinanceCreditCard
	err := row.Scan(
		&i.BankName,
		&i.CardName,
		&i.CardNumber,
		&i.Cvv,
		&i.Pin,
		&i.Usage,
		&i.UserID,
	)
	return i, err
}

const getCreditCardsByUserId = `-- name: GetCreditCardsByUserId :many
SELECT bank_name, card_name, card_number, cvv, pin, usage, user_id FROM "Finance"."Credit_Card"
WHERE user_id = $1
`

func (q *Queries) GetCreditCardsByUserId(ctx context.Context, userID int32) ([]FinanceCreditCard, error) {
	rows, err := q.db.QueryContext(ctx, getCreditCardsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FinanceCreditCard
	for rows.Next() {
		var i FinanceCreditCard
		if err := rows.Scan(
			&i.BankName,
			&i.CardName,
			&i.CardNumber,
			&i.Cvv,
			&i.Pin,
			&i.Usage,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreditCardUsageByCardNumber = `-- name: UpdateCreditCardUsageByCardNumber :exec
UPDATE "Finance"."Credit_Card"
SET usage = $1
WHERE card_number = $2 AND user_id = $3
`

type UpdateCreditCardUsageByCardNumberParams struct {
	Usage      sql.NullString `json:"usage"`
	CardNumber string         `json:"card_number"`
	UserID     int32          `json:"user_id"`
}

func (q *Queries) UpdateCreditCardUsageByCardNumber(ctx context.Context, arg UpdateCreditCardUsageByCardNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateCreditCardUsageByCardNumber, arg.Usage, arg.CardNumber, arg.UserID)
	return err
}
